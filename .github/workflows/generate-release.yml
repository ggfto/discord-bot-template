name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write

jobs:
  prepare_repository:
    name: 📦 Preparar repositório
    runs-on: ubuntu-latest
    outputs:
      lowercase_repo: ${{ steps.repo_name.outputs.lowercase_repo }}
    steps:
      - uses: actions/checkout@v5
      - name: Set lowercase repository name
        id: repo_name
        run: |
          LOWERCASE_REPO=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "lowercase_repo=$LOWERCASE_REPO" >> $GITHUB_OUTPUT
          echo "✅ Nome do repositório em lowercase: $LOWERCASE_REPO"
      - name: Debug lowercase repository output
        run: |
          echo "🔹 Valor de lowercase_repo: ${{ steps.repo_name.outputs.lowercase_repo }}"

      - name: Update package version, generate and push README
        run: |
          echo "::group::Atualizando arquivos e commitando na main"
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
          LOWERCASE_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "lowercase_repo=$LOWERCASE_REPO" >> $GITHUB_OUTPUT

          echo "🔹 Atualizando package.json para versão $CURRENT_TAG"
          npm version $CURRENT_TAG --no-git-tag-version || echo "Versão já configurada."

          echo "🔹 Gerando README.md e docker-compose.yml"
          rm -f README.md docker-compose.yml
          sed -e "s|{{repository}}|${{ github.repository }}|g" README.template.md > README.md
          sed -e "s|{{lowercase_repo}}|${LOWERCASE_REPO}|g" \
              -e "s|{{repository}}|${{ github.event.repository.name }}|g" \
              docker-compose.yml.template > docker-compose.yml

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git fetch origin main
          git reset --hard origin/main
          git add README.md docker-compose.yml package.json
          git commit -m "chore(skip ci): Atualizado README.md e docker-compose.yml" || echo "Nenhuma mudança detectada."
          git push origin HEAD:main
          echo "::endgroup::"

  lint_and_test:
    name: 🧹 Lint & ✅ Testes
    runs-on: ubuntu-latest
    needs: prepare_repository
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Debug lowercase repository output
        run: |
          echo "🔹 Valor de lowercase_repo: ${{ needs.prepare_repository.outputs.lowercase_repo }}"
      - name: Install dependencies
        run: |
          echo "::group::Instalando dependências"
          npm install
          echo "::endgroup::"
      - name: Run ESLint
        run: |
          echo "::group::Rodando Linter"
          npm run lint
          echo "::endgroup::"
      - name: Run tests
        run: |
          echo "::group::Rodando Testes Unitários"
          npm test
          echo "::endgroup::"

  build_docker:
    name: 🐳 Build & Push Docker
    runs-on: ubuntu-latest
    needs: [lint_and_test, prepare_repository]
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ needs.prepare_repository.outputs.lowercase_repo }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ github.ref_name }}
      - name: Build and Push
        run: |
          echo "::group::Build & Push Docker"
          # Remove quebras de linha e espaços extras das tags
          TAGS=$(echo "${{ steps.meta.outputs.tags }}" | tr -d '\n' | tr -s ' ')
          echo "🔹 Tags: $TAGS"
          docker buildx build --platform linux/amd64,linux/arm64 \
          -t "$TAGS" \
          --push .
          echo "::endgroup::"

  generate_release_notes:
    name: 📝 Gerar notas de release
    runs-on: ubuntu-latest
    needs: build_docker
    outputs:
      release_body: ${{ steps.prepare_release_body.outputs.body }}
      version: ${{ steps.get_project_information.outputs.version }}
    steps:
      - uses: actions/checkout@v5
      - name: Get commit messages
        id: get_project_information
        run: |
          echo "::group::Coletando commits"
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log $LAST_TAG..$GITHUB_SHA --oneline --pretty=format:"%h %s")
          else
            COMMITS=$(git log --oneline --pretty=format:"%h %s")
          fi

          if [ -z "$COMMITS" ]; then
            echo "Nenhuma mudança significativa desde a última release." > ./release_body.txt
          else
            echo "$COMMITS" > ./release_body.txt
          fi

          echo "version=$CURRENT_TAG" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Prepare release body
        id: prepare_release_body
        run: |
          if [ -f release_body.txt ]; then
            RELEASE_NOTES=$(head -c 1900 release_body.txt)
            echo "body=$RELEASE_NOTES" >> $GITHUB_OUTPUT
          else
            echo "body=Nenhuma nota de release disponível." >> $GITHUB_OUTPUT
          fi

  create_release:
    name: 🚀 Criar Release
    runs-on: ubuntu-latest
    needs: generate_release_notes
    steps:
      - name: Create GitHub Release
        uses: comnoco/create-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ github.ref_name }}"
          release_name: "${{ needs.generate_release_notes.outputs.version }}"
          body: "${{ needs.generate_release_notes.outputs.release_body }}"
          draft: false
          prerelease: false

  post_to_discord:
    name: 🔔 Notificar no Discord
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Post to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.UPDATE_DISCORD_WEBHOOK }}
          RELEASE_URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}
          RELEASE_TAG: ${{ github.ref_name }}
          RELEASE_AUTHOR: ${{ github.actor }}
          RELEASE_BODY: ${{ needs.generate_release_notes.outputs.release_body }}
          LOGO_URL: ${{ secrets.LOGO_URL }}
        run: |
          if [ -z "$DISCORD_WEBHOOK_URL" ]; then
            echo "Webhook URL não definido. Pulando o envio do webhook."
            exit 0
          fi
          REPO_DESCRIPTION=$(curl -s https://api.github.com/repos/${{ github.repository }} | jq -r .description)
          EMBED_DATA=$(jq -n \
            --arg author "$RELEASE_AUTHOR" \
            --arg title "[${{ github.event.repository.name }}] Nova versão disponível: $RELEASE_TAG" \
            --arg url "$RELEASE_URL" \
            --arg desc "$REPO_DESCRIPTION" \
            --arg body "$RELEASE_BODY" \
            --arg logo "$LOGO_URL" \
            '{
                embeds: [{
                author: { name: "Github - Updates", icon_url: $logo },
                title: $title,
                url: $url,
                description: $desc,
                fields: [
                    { name: "O que há de novo?", value: $body },
                    { name: "Veja todas as mudanças", value: "[Clique aqui](\($url)/commits/$RELEASE_TAG)" }
                ],
                color: 4243543,
                footer: { text: "Realizado por: \($author)", icon_url: $logo },
                timestamp: now | strflocaltime("%Y-%m-%dT%H:%M:%SZ")
                }]
            }')

          curl -H "Content-Type: application/json" -d "$EMBED_DATA" $DISCORD_WEBHOOK_URL
